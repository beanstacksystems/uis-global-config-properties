spring.application.name=uis-api-gateway
#spring.cloud.config.uri=http://localhost:8888
#management.endpoints.web.exposure.include=*
server.port=8080
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/

## PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/uis-api-gateway
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
# Hikari will use the above plus the following to setup connection pooling
spring.datasource.hikari.minimumIdle=3
spring.datasource.hikari.maximumPoolSize=500
spring.datasource.hikari.idleTimeout=30000
spring.datasource.hikari.poolName=SpringBootJPAHikariCP
spring.datasource.hikari.maxLifetime=2000000
spring.datasource.hikari.connectionTimeout=30000
spring.datasource.pool-prepared-statements=true
spring.datasource.max-open-prepared-statements=250
spring.jpa.hibernate.connection.provider_class=org.hibernate.hikaricp.internal.HikariCPConnectionProvider
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQL82Dialect

#Hibernate Configuration
spring.jpa.generate-ddl = true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

server.error.include-stacktrace=never


#feign.hystrix.enabled=true
#hystrix.shareSecurityContext=true

#ignore services all
zuul.ignored-services: '*'
#All url come with prefix/api will interpret
zuul.prefix=/api

zuul.routes.patient-management-service.path=/patient-management-service/**
#zuul.routes.patient-management-service.url=http://localhost:8081
zuul.routes.patient-management-service.sensitive-headers
zuul.routes.patient-management-service.service-id=patient-management-service


zuul.routes.clinic-management-service.path=/clinic-management-service/**
#zuul.routes.patient-management-service.url=http://localhost:8081
zuul.routes.clinic-management-service.sensitive-headers
zuul.routes.clinic-management-service.service-id=clinic-management-service

# Social
spring.security.oauth2.client.registration.google.client-id=155649183928-evv6rhcnfccgah86h3kjj2osuokfj50q.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=f2alhOiqMdD1YIxmrk09MBlU
#spring.security.oauth2.client.registration.google.redirectUri= "{baseUrl}/oauth2/callback/{registrationId}"
#spring.security.oauth2.client.registration.google.scope = email
#spring.security.oauth2.client.registration.google.scope = profile

spring.security.oauth2.client.registration.facebook.client-id=3323999927638523 
spring.security.oauth2.client.registration.facebook.client-secret=bd41e733819b7e1a8b56f2fee28c54a5
# Note that facebook now mandates the use of https redirect URIs, so make sure your app supports https in production
#spring.security.oauth2.client.registration.facebook.redirectUri= "{baseUrl}/oauth2/callback/{registrationId}"
#spring.security.oauth2.client.registration.google.scope = email
#spring.security.oauth2.client.registration.google.scope = public_profile

#spring.security.oauth2.provider.

#http://localhost:8080/oauth2/callback/google
