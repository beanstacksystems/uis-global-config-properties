spring.application.name=uis-social

management.endpoints.web.exposure.include=*

## SSL Configuration

server.port=8443

server.ssl.key-store=classpath:keystore.p12
server.ssl.key-store-password=beanstack
server.ssl.key-store-type=pkcs12
server.ssl.key-alias=uis

#server.ssl.key-password=beanstack

#    error:
#        whitelabel:
#            enabled: false

eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
            
spring.datasource.url= jdbc:postgresql://localhost:5432/spring_social?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
spring.datasource.username= postgres
spring.datasource.password= postgres
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
# Hikari will use the above plus the following to setup connection pooling
# spring.datasource.hikari.minimumIdle=3
# spring.datasource.hikari.maximumPoolSize=500
# spring.datasource.hikari.idleTimeout=30000
# spring.datasource.hikari.poolName=SpringBootJPAHikariCP
# spring.datasource.hikari.maxLifetime=2000000
# spring.datasource.hikari.connectionTimeout=30000
# spring.datasource.pool-prepared-statements=true
# spring.datasource.max-open-prepared-statements=250
# spring.jpa.hibernate.connection.provider_class=org.hibernate.hikaricp.internal.HikariCPConnectionProvider
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQL82Dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL10Dialect

#Hibernate Configuration
spring.jpa.open-in-view= false
spring.jpa.show-sql= true
spring.jpa.hibernate.ddl-auto=update
#            naming:
#                implicit-strategy: org.hibernate.cfg.ImprovedNamingStrategy


#spring.security.oauth2.client.registration.google.clientId: 5014057553-8gm9um6vnli3cle5rgigcdjpdrid14m9.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.clientId= 155649183928-evv6rhcnfccgah86h3kjj2osuokfj50q.apps.googleusercontent.com
#spring.security.oauth2.client.registration.google.clientSecret: tWZKVLxaD_ARWsriiiUFYoIk
spring.security.oauth2.client.registration.google.clientSecret= f2alhOiqMdD1YIxmrk09MBlU
spring.security.oauth2.client.registration.google.redirectUri= "{baseUrl}/oauth2/callback/{registrationId}"
spring.security.oauth2.client.registration.google.scope=email
spring.security.oauth2.client.registration.google.scope=profile


#spring.security.oauth2.client.registration.facebook.clientId: 121189305185277
spring.security.oauth2.client.registration.facebook.clientId= 3323999927638523
#spring.security.oauth2.client.registration.facebook.clientSecret: 42ffe5aa7379e8326387e0fe16f34132
spring.security.oauth2.client.registration.facebook.clientSecret= bd41e733819b7e1a8b56f2fee28c54a5
spring.security.oauth2.client.registration.facebook.redirectUri= "{baseUrl}/oauth2/callback/{registrationId}"
spring.security.oauth2.client.registration.facebook.scope= email
spring.security.oauth2.client.registration.facebook.scope= public_profile


spring.security.oauth2.client.registration.github.clientId= d3e47fc2ddd966fa4352
spring.security.oauth2.client.registration.github.clientSecret= 3bc0f6b8332f93076354c2a5bada2f5a05aea60d
spring.security.oauth2.client.registration.github.redirectUri= "{baseUrl}/oauth2/callback/{registrationId}"
spring.security.oauth2.client.registration.github.scope.user=email
spring.security.oauth2.client.registration.github.scope.read=user
#            mercadolivre:
#              client-authentication-method: BASIC

spring.security.oauth2.client.provider.mercadolivre.user-info-authentication-method= BASIC
spring.security.oauth2.client.provider.facebook.authorizationUri= https://www.facebook.com/v3.0/dialog/oauth
spring.security.oauth2.client.provider.facebook.tokenUri= https://graph.facebook.com/v3.0/oauth/access_token
spring.security.oauth2.client.provider.facebook.userInfoUri= https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)

#app.auth.tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
app.auth.tokenSecret= 6265616e737461636b73797374656d73
#app.auth.tokenSecret= beanstacksystems
app.auth.tokenExpirationMsec: 864000000

# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the client in the /oauth2/authorize request.
# We're not using cookies because they won't work well in mobile clients.
app.oauth2.authorizedRedirectUris=http://localhost:3000/oauth2/redirect
app.oauth2.authorizedRedirectUris=myandroidapp://oauth2/redirect
app.oauth2.authorizedRedirectUris=myiosapp://oauth2/redirect